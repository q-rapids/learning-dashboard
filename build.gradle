buildscript {
	ext {
		springBootVersion = '2.1.6.RELEASE'
		snippetsDir = file('build/generated-snippets')
	}
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath('org.postgresql:postgresql:42.1.4.jre7')
		classpath 'org.asciidoctor:asciidoctor-gradle-plugin:1.5.9.2'
	}
}

plugins {
	id "org.sonarqube" version "2.7"
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'war'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'jacoco'
apply plugin: 'org.asciidoctor.convert'

group = 'com.upc.gessi.qrapids'
version = '3.3'
sourceCompatibility = 1.8

war {
	from 'README.md'
	baseName = 'learning-dashboard'
	version =  version
	webXml = file('src/main/resources/web.xml')
	from ('src/main/resources') {
		include 'Logs-servlet.xml'
		into 'WEB-INF'
	}
	enabled = true
}

bootWar {
	from 'README.md'
	baseName = 'learning-dashboard'
	version =  version
	webXml = file('src/main/resources/web.xml')
	from ('src/main/resources') {
		include 'Logs-servlet.xml'
		into 'WEB-INF'
	}
	enabled = true
}

repositories {
	mavenCentral()
}

dependencies {

	// Security
	compile("org.springframework.boot:spring-boot-starter-security")

	// JWT
	compile("io.jsonwebtoken:jjwt:0.7.0")

	// Development
	compile('org.springframework.boot:spring-boot-devtools')

	// Spring Boot
	compile('org.springframework.boot:spring-boot-starter-actuator')
	compile('org.springframework.boot:spring-boot-starter-data-jpa')
	compile('org.springframework.boot:spring-boot-starter-thymeleaf')
	compile('org.springframework.boot:spring-boot-starter-web')

	// Spring mail
	compile 'org.springframework.boot:spring-boot-starter-mail:1.5.8.RELEASE'

	// Database JDBC
	compile('org.postgresql:postgresql:42.1.4.jre7')

	// JSON Java Library
	compile 'com.google.code.gson:gson:2.8.2'

	// Socket
	compile 'org.springframework.boot:spring-boot-starter-websocket'

	// Utils
	compile 'commons-io:commons-io:2.5'
	compile 'commons-codec:commons-codec:1.10'

	// MongoDB API
	compile('org.mongodb:mongodb-driver-sync:3.12.14')
	compile('org.mongodb:mongodb-driver-core:3.12.14')
	compile('org.mongodb:bson:3.12.14')
	compile files('libs/LD-qma-mongo-1.0.jar')

	// QR-Eval library
	compile files('libs/LD-eval-2.2.jar')

	// Logging
	compile('org.apache.logging.log4j:log4j-api:2.9.1')
	compile('org.apache.logging.log4j:log4j-core:2.9.1')

	// Rest API Documentation
	asciidoctor 'org.springframework.restdocs:spring-restdocs-asciidoctor'

	// Testing
	testCompile('org.springframework.boot:spring-boot-starter-test')
	testCompile 'org.springframework.restdocs:spring-restdocs-mockmvc'
	testCompile('com.h2database:h2')

	// Comment this line to launch application from developing environment
	// Uncomment this line before generating .war file
	// providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'

}

jacoco {
	toolVersion = "0.8.2"
}

jacocoTestReport {
	reports {
		xml.enabled = true
		html.enabled = false
	}
}

asciidoctor {
	sourceDir = file('docs/asciidoc')
	inputs.dir snippetsDir
	outputDir = file('docs/asciidoc')
	separateOutputDirs = false
	dependsOn test
}

test {
	testLogging {
		events "passed", "skipped", "failed"
		exceptionFormat "full"
	}
}

